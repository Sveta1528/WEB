/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
@s-behance-name: 's-behance';
@s-behance-x: 0px;
@s-behance-y: 0px;
@s-behance-offset-x: 0px;
@s-behance-offset-y: 0px;
@s-behance-width: 60px;
@s-behance-height: 60px;
@s-behance-total-width: 180px;
@s-behance-total-height: 170px;
@s-behance-image: 'icons.png';
@s-behance: 0px 0px 0px 0px 60px 60px 180px 170px 'icons.png' 's-behance';
@s-dfacebook-name: 's-dfacebook';
@s-dfacebook-x: 120px;
@s-dfacebook-y: 60px;
@s-dfacebook-offset-x: -120px;
@s-dfacebook-offset-y: -60px;
@s-dfacebook-width: 50px;
@s-dfacebook-height: 50px;
@s-dfacebook-total-width: 180px;
@s-dfacebook-total-height: 170px;
@s-dfacebook-image: 'icons.png';
@s-dfacebook: 120px 60px -120px -60px 50px 50px 180px 170px 'icons.png' 's-dfacebook';
@s-dlinkedin-name: 's-dlinkedin';
@s-dlinkedin-x: 0px;
@s-dlinkedin-y: 120px;
@s-dlinkedin-offset-x: 0px;
@s-dlinkedin-offset-y: -120px;
@s-dlinkedin-width: 50px;
@s-dlinkedin-height: 50px;
@s-dlinkedin-total-width: 180px;
@s-dlinkedin-total-height: 170px;
@s-dlinkedin-image: 'icons.png';
@s-dlinkedin: 0px 120px 0px -120px 50px 50px 180px 170px 'icons.png' 's-dlinkedin';
@s-dribbble-name: 's-dribbble';
@s-dribbble-x: 60px;
@s-dribbble-y: 0px;
@s-dribbble-offset-x: -60px;
@s-dribbble-offset-y: 0px;
@s-dribbble-width: 60px;
@s-dribbble-height: 60px;
@s-dribbble-total-width: 180px;
@s-dribbble-total-height: 170px;
@s-dribbble-image: 'icons.png';
@s-dribbble: 60px 0px -60px 0px 60px 60px 180px 170px 'icons.png' 's-dribbble';
@s-dtwitter-name: 's-dtwitter';
@s-dtwitter-x: 50px;
@s-dtwitter-y: 120px;
@s-dtwitter-offset-x: -50px;
@s-dtwitter-offset-y: -120px;
@s-dtwitter-width: 50px;
@s-dtwitter-height: 50px;
@s-dtwitter-total-width: 180px;
@s-dtwitter-total-height: 170px;
@s-dtwitter-image: 'icons.png';
@s-dtwitter: 50px 120px -50px -120px 50px 50px 180px 170px 'icons.png' 's-dtwitter';
@s-facebook-name: 's-facebook';
@s-facebook-x: 0px;
@s-facebook-y: 60px;
@s-facebook-offset-x: 0px;
@s-facebook-offset-y: -60px;
@s-facebook-width: 60px;
@s-facebook-height: 60px;
@s-facebook-total-width: 180px;
@s-facebook-total-height: 170px;
@s-facebook-image: 'icons.png';
@s-facebook: 0px 60px 0px -60px 60px 60px 180px 170px 'icons.png' 's-facebook';
@s-google-name: 's-google';
@s-google-x: 60px;
@s-google-y: 60px;
@s-google-offset-x: -60px;
@s-google-offset-y: -60px;
@s-google-width: 60px;
@s-google-height: 60px;
@s-google-total-width: 180px;
@s-google-total-height: 170px;
@s-google-image: 'icons.png';
@s-google: 60px 60px -60px -60px 60px 60px 180px 170px 'icons.png' 's-google';
@s-twitter-name: 's-twitter';
@s-twitter-x: 120px;
@s-twitter-y: 0px;
@s-twitter-offset-x: -120px;
@s-twitter-offset-y: 0px;
@s-twitter-width: 60px;
@s-twitter-height: 60px;
@s-twitter-total-width: 180px;
@s-twitter-total-height: 170px;
@s-twitter-image: 'icons.png';
@s-twitter: 120px 0px -120px 0px 60px 60px 180px 170px 'icons.png' 's-twitter';
@spritesheet-width: 180px;
@spritesheet-height: 170px;
@spritesheet-image: 'icons.png';
@spritesheet-sprites: @s-behance @s-dfacebook @s-dlinkedin @s-dribbble @s-dtwitter @s-facebook @s-google @s-twitter;
@spritesheet: 180px 170px 'icons.png' @spritesheet-sprites;

/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
.sprite-width(@sprite) {
  width: extract(@sprite, 5);
}

.sprite-height(@sprite) {
  height: extract(@sprite, 6);
}

.sprite-position(@sprite) {
  @sprite-offset-x: extract(@sprite, 3);
  @sprite-offset-y: extract(@sprite, 4);
  background-position: @sprite-offset-x @sprite-offset-y;
}

.sprite-image(@sprite) {
  @sprite-image: extract(@sprite, 9);
  @sprite-image-bare: ~`"@{sprite-image}".slice(1, -1)`;
  background-image: url(@sprite-image-bare);
}

.sprite(@sprite) {
  .sprite-image(@sprite);
  .sprite-position(@sprite);
  .sprite-width(@sprite);
  .sprite-height(@sprite);
}

/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
.sprites(@sprites, @i: 1) when (@i <= length(@sprites)) {
  @sprite: extract(@sprites, @i);
  @sprite-name: e(extract(@sprite, 10));
  .@{sprite-name} {
    .sprite(@sprite);
  }
  .sprites(@sprites, @i + 1);
}
